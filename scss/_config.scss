/* ------------------- */
/* Custom properties   */
/* ------------------- */
:root {
   /* colors */
   --clr-dark: 230 35% 7%;
   --clr-light: 231 77% 90%;
   --clr-white: 0 0% 100%;
   /* font sizes */

   /* the font sizes that we have in design system are for large screen  so we break our font size values to levels 
   from smaller 200 to bigger 900 and we use rem not px for better accessibility
   --fs-900: 9.375rem;
   --fs-800: 6.25rem;
   --fs-700: 3.5rem;
   --fs-600: 2rem;
   --fs-500: 1.75rem;
   --fs-400: 1.125rem;
   --fs-300: 1rem;
   --fs-200: 0.875rem;
   next we will see our design and see the change that happend in font size of elemnts from descktop to taplet to phone
   and we will have conclusion that  mustly elemnts that have  --fs-900 lvalue ta3o kt7awel men 9.3 descktop to 5 f 
   lphone and so on with --fs800... so what will do is just change the value of --fs custom properties in tablet
   and descktop and we will intail it with the phone sizes so for matalan --fs-900 : 5 => 5 => 9.375
   that will help us to do not change the element font size, just the custom property will automaticly changed --fs 
   and bach tkhdem bhad technique khas takhed chi 9ararat bnisba lfs o tad7iyat 7it l elements maghaykounch 3andhom 100%
   fs li kiyn f design.
   */
   --fs-900: clamp(5rem, 8vw + 1rem, 9.375rem); // do it automaticly
   --fs-800: clamp(3.5rem, 8vw + 1rem, 6.25rem);
   --fs-700: clamp(1.5rem, 3vw + 0.8rem, 3.5rem);
   --fs-600: 1rem;
   --fs-500: 1rem;
   --fs-400: 0.9375rem;
   --fs-300: 1rem;
   --fs-200: 0.875rem;
   //    our media screen are 0 < mobile < tablet/35em/530px < descktop/35em/720px nad is good and pupler
   @media (min-width: 35em) {
      --fs-600: 1.5rem;
      --fs-500: 1.25rem;
      --fs-400: 1rem;
      --fs-200: 1rem;
   }

   @media (min-width: 45em) {
      /* font-sizes */
      --fs-600: 2rem;
      --fs-500: 1.5rem;
      --fs-400: 1.125rem;
   }

   /* font-families */
   --ff-serif: "Bellefair", serif;
   --ff-sans-cond: "Barlow Condensed", sans-serif;
   --ff-sans-normal: "Barlow", sans-serif;
   /* letter-spacing */
   --lt-1: 4.75px;
   --lt-2: 2.7px;
   --lt-3: 2.35px;
}
/* ------------------- */
/* reset classes     */
/* ------------------- */

/* Box sizing */
*,
*::before,
*::after {
   box-sizing: border-box;
   margin: 0;
   padding: 0;
}
a {
   display: block;
   text-decoration: none;
}

ul {
   list-style: none;
}

button {
   cursor: pointer;
   border: 0;
   background-color: initial;
}

picture {
   display: block;
}

:not(img)::selection {
   background-color: #{"hsl(var(--clr-light))"};
   color: #{"hsl(var(--clr-dark))"};
}
img::selection {
   background-color: transparent;
}
/* 
   the default weaight for headings is bold && we want it normal 
*/
h1,
h2,
h3,
h4,
h5,
h6,
p {
   font-weight: 400;
}
/* set up the body */
body {
   // we choose the font family and size and bg and the color for the Body text because it will repeat a lot.
   font-family: var(--ff-sans-normal);
   font-size: var(--fs-400);
   color: #{"hsl( var(--clr-white)  )"};
   background-color: #{"hsl( var(--clr-dark)  )"};
   line-height: 1.5;
   min-height: 100vh;
   display: grid;
   grid-auto-rows: min-content 1fr;
   overflow-x: hidden;
   position: relative;
}

/* make images easier to work with */
img,
picutre {
   max-width: 100%;
   display: block;
}

/* make form elements easier to work with */
input,
button,
textarea,
select {
   font: inherit;
}

/* remove animations for people who've turned them off */
@media (prefers-reduced-motion: reduce) {
   *,
   *::before,
   *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
   }
}

// Utility classes are classes tha have just one simple job to set flex or size o color just one job
/* ------------------- */
/* Utility classes     */
/* ------------------- */

.flex {
   display: flex;
   gap: var(--gap, 1rem); // now flex support gap
}

.grid {
   display: grid;
   gap: var(--gap, 1rem);
}

.d-block {
   display: block;
}

// secondary container
.container {
   margin-inline: auto; // is margin left && right
   padding-inline: 2em; // is padding left && right
   max-width: 80rem;
}

// our main container
.grid-container {
   display: grid;
   place-items: center; // <'align-items'> <'justify-items'> shortcut
   text-align: center;
   padding-inline: 1rem;

   // insure that all texts are less than 50 char
   p {
      max-width: 50ch;
   }
   // add media in high screens > 768px
   @media (min-width: 45em) {
      text-align: left;
      column-gap: var(--container-gap, 2rem);
      // minmax(2rem, 1fr) is a good trick to center the two middle column inside the grid
      grid-template-columns: minmax(1rem, 1fr) minmax(0, 40rem) minmax(0, 40rem) minmax(
            1rem,
            1fr
         );

      & > *:first-child {
         grid-column: 2;
      }
      & > *:last-child {
         grid-column: 3;
      }
   }
}

// we will do a technique to add margin for chlids of a element
// we use where to give :not(:first-child) zero priority, so we select all child elements of flow element except the first
.flow > *:where(:not(:first-child)) {
   margin-top: var(--flow-space, 1rem);
}

// hide element for people how use screen reader
.sr-only {
   position: absolute;
   width: 1px;
   height: 1px;
   padding: 0;
   margin: -1px;
   overflow: hidden;
   clip: rect(0, 0, 0, 0);
   white-space: nowrap; 
   border: 0;
}

.skip-to-content {
   position: absolute;
   z-index: 9999;
   background: #{"hsl( var(--clr-white) )"};
   color: #{"hsl( var(--clr-dark) )"};
   padding: 0.5em 1em;
   transform: translateY(-100%);
   transition: transform 250ms ease-in;
   &:focus {
      transform: translateY(0);
   }
}
// numbered-titles that repeat a lot
.numbered-title {
   font-family: var(--ff-sans-cond);
   font-size: #{"clamp(1rem, 1.5vw + .4rem ,1.75rem)"};
   letter-spacing: var(--lt-1);
   text-transform: uppercase;
   span {
      margin-right: 0.5em;
      font-weight: 700;
      color: #{"hsl(var(--clr-white) / 0.25)"};
   }
}

/* colors */

.bg-dark {
   background-color: #{"hsl( var(--clr-dark)  )"};
}
.bg-accent {
   background-color: #{"hsl( var(--clr-light) )"};
}
.bg-white {
   background-color: #{"hsl( var(--clr-white))"};
}

.text-dark {
   color: #{"hsl( var(--clr-dark) )"};
}
.text-accent {
   color: #{"hsl( var(--clr-light) )"};
}
.text-white {
   color: #{"hsl( var(--clr-white) )"};
}

/* typography */

.ff-serif {
   font-family: var(--ff-serif);
}
.ff-sans-cond {
   font-family: var(--ff-sans-cond);
}
.ff-sans-normal {
   font-family: var(--ff-sans-normal);
}

.letter-spacing-1 {
   letter-spacing: var(--lt-1);
}
.letter-spacing-2 {
   letter-spacing: var(--lt-2);
}
.letter-spacing-3 {
   letter-spacing: var(--lt-3);
}

.uppercase {
   text-transform: uppercase;
}

.fs-900 {
   font-size: var(--fs-900);
}
.fs-800 {
   font-size: var(--fs-800);
}
.fs-700 {
   font-size: var(--fs-700);
}
.fs-600 {
   font-size: var(--fs-600);
}
.fs-500 {
   font-size: var(--fs-500);
}
.fs-400 {
   font-size: var(--fs-400);
}
.fs-300 {
   font-size: var(--fs-300);
}
.fs-200 {
   font-size: var(--fs-200);
}

.fs-900,
.fs-800,
.fs-700,
.fs-600 {
   line-height: 1.1;
}

.line-hight-normal {
   line-height: clamp(1.56rem, 3.8vw, 2rem);
}
.tablet-margin-top {
   @media (min-width: 35em) and (max-width: 45em) {
      margin-top: 2.5rem;
   }
}
// one components have many elemnets inside it so it is complex than utility class
/* ------------------- */
/* Component classes     */
/* ------------------- */
// we will convert INTERACTIVE ELEMENTS in our design systime to base components and also set our header

// svg

.github-corner {
   border-bottom: 0;
   position: fixed;
   right: 0;
   text-decoration: none;
   top: 0;
   z-index: 1;
   display: none;
   @media (min-width:35em) {
      display: block;
   }
}

.github-corner:hover .octo-arm {
   -webkit-animation: octocat-wave 560ms ease-in-out;
   animation: octocat-wave 560ms ease-in-out;
}
.github-corner svg {
   color: #fff;
   fill: black;
   height: 80px;
   width: 80px;
}

@keyframes octocat-wave {
   0%,
   100% {
      transform: rotate(0);
   }
   20%,
   60% {
      transform: rotate(-25deg);
   }
   40%,
   80% {
      transform: rotate(10deg);
   }
}

.CreaterLogo {
   position: absolute;
   bottom: 15px;
   right: 15px;
   width: 70px;
   z-index: 10000;
}

// home explore+ button
.large-button {
   font-size: 2rem;
   display: inline-grid;
   place-items: center;
   padding: 0 2em;
   border-radius: 50%;
   aspect-ratio: 1;
   text-decoration: none;
   position: relative;
   z-index: 1;
   &::after {
      content: "";
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: #{"hsl(var(--clr-white) / .1)"};
      border-radius: 50%;
      z-index: -1;
      transition: transform 500ms ease-in-out, opacity 750ms linear;
      opacity: 0;
   }
   &:where(:focus, :hover):after {
      transform: scale(1.4);
      opacity: 1;
   }

   @media (max-width: 45em) {
      font-size: 1.5rem;
   }
}

// header set up

.primary-header {
   align-items: center;
   justify-content: space-between;

   @media (min-width: 45em) {
      &::before {
         content: "";
         height: 1px;
         background-color: #{"hsl(var(--clr-white) / 0.25)"};
         position: relative;
         width: 100%;
         order: 1;
         margin-right: -2.5rem;
         z-index: 1;
      }
   }
   .logo {
      margin: 1.5rem clamp(1.5rem, 4.5vw, 3.5rem);
   }
   .mobile-nav-toggle {
      position: absolute;
      z-index: 1001;
      right: 1.5rem;
      top: 2rem;
      background-image: url(../assets/shared/icon-hamburger.svg);
      background-repeat: no-repeat;
      background-position: center;
      width: 1.5rem;
      aspect-ratio: 1;
      @media (min-width: 35rem) {
         display: none;
      }
   }
   nav {
      order: 2;
      .primary-navigation {
         --gap: clamp(1.5rem, 5vw, 3.5rem);
         --underline-gap: 2rem;
         backdrop-filter: blur(1.25rem);
         background-color: #{"hsl(var(--clr-dark) / 0.95)"};
         transition: 500ms ease-in-out;
         @supports (backdrop-filter: blur(1.25rem)) {
            background-color: #{"hsl(var(--clr-white) / 0.04)"};
            backdrop-filter: blur(1.25rem);
         }
         a {
            transition: border-bottom 3s;
            width: max-content;
            & > span {
               font-weight: 700;
               margin-right: 0.5em;
               @media (min-width: 35em) and (max-width: 44.999em) {
                  display: none;
               }
            }
         }

         @media (max-width: 35em) {
            --underline-gap: 0.5rem;
            flex-direction: column;
            position: fixed;
            z-index: 1000;
            height: 100vh;
            padding-top: #{"min(20rem, 15vh)"};
            padding-left: 2rem;
            inset: 0 0 0 30%;
            &.underline-indicators > .active {
               border: none !important;
            }
            &.menuControl {
               opacity: 0;
               transform: translateX(100%);
            }
         }
         @media (min-width: 45em) {
            margin-block: 2rem;
         }
         @media (min-width: 35em) {
            padding-inline: clamp(3rem, 7vw, 8rem);
         }
      }
   }
}

// set the base of the tap-navigation
.tab-list {
   --gap: 2rem;
   --underline-gap: 0.75rem;
   justify-content: center;
   margin-bottom: clamp(1.25rem, 4.5vw, 2.31rem);
   // margin-bottom: ;

   @media (min-width: 45rem) {
      justify-content: initial;
   }
   @media (min-width: 45rem) {
      justify-content: initial;
   }
   .active {
      color: var(--clr-white);
   }
}

// underline-indicator that uses in tab and primary navigation
.underline-indicators {
   & > * {
      padding: var(--underline-gap, 1rem) 0;
      border-bottom: 0.2rem solid #{"hsl(var(--clr-white) / 0)"};
      transition: border-bottom-color 400ms ease-in-out;
   }
   & > :where(.active, [aria-selected="true"]) {
      border-bottom-color: #{"hsl(var(--clr-white) / 1)"};
      color: #{"hsl(var(--clr-white) / 1)"};
   }
   & > *:not(:where(.active, [aria-selected="true"])):where(:hover, :focus) {
      border-bottom: 0.2rem solid #{"hsl(var(--clr-white) / .5)"};
   }
}

//dot-indicators to switch content
.dot-indicators {
   --gap: 1.5rem;
   & > * {
      // width: 15px;
      padding: 0.5em;
      aspect-ratio: 1;
      border-radius: 50%;
      background-color: #{"hsl(var(--clr-white) / .17)"};
   }
   & > *[aria-selected="true"] {
      background-color: #{"hsl(var(--clr-white) / 1)"};
   }
   & > *[aria-selected="false"]:where(:hover, :focus) {
      background-color: #{"hsl(var(--clr-white) / .5)"};
   }
}

// numbers sliders
.numbers {
   --flow-space: 2rem;
   & > * {
      display: grid;
      place-items: center;
      //
      width: clamp(2.5rem, 8.5vw, 5rem);
      aspect-ratio: 1;
      border-radius: 50%;
      border: 1px solid #{"hsl(var(--clr-white) / .25)"};
      color: inherit;
   }
   & > *:hover {
      border: 1px solid #{"hsl(var(--clr-white) / 1)"};
   }
   & > [aria-selected="true"] {
      background-color: #{"hsl(var(--clr-white))"};
      color: #{"hsl(var(--clr-dark))"};
      border: 0 !important;
   }
}
